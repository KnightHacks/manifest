# Default values for router.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# -- See https://www.apollographql.com/docs/router/configuration/overview#configuration-file for yaml structure
router:
  configuration:
    supergraph:
      listen: 0.0.0.0:80
      introspection: true
    cors:
      origins:
        - https://studio.apollographql.com
    headers:
      all:
        request:
          - propagate:
              named: 'authorization'
    rhai:
      main: "script.rhai"
      scripts: "/etc/apollo"
    sandbox:
      enabled: true
    homepage:
      enabled: false
  args:
    - --hot-reload

managedFederation:
  # -- If using managed federation, the graph API key to identify router to Studio
  apiKey:
  # -- If using managed federation, use existing Secret which stores the graph API key instead of creating a new one.
  # If set along `managedFederation.apiKey`, a secret with the graph API key will be created using this parameter as name
  existingSecret:
  # -- If using managed federation, the variant of which graph to use
  graphRef: ""

image:
  repository: ghcr.io/apollographql/router
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

containerPorts:
  # -- If you override the port in `router.configuration.server.listen` then make sure to match the listen port here
  http: 80

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

extraEnvVars:
  - name: APOLLO_ROUTER_SUPERGRAPH_PATH
    value: /etc/apollo/supergraph.graphqls
  - name: APOLLO_ROUTER_LOG
    value: debug

extraEnvVarsCM: ''
extraEnvVarsSecret: ''
#moved into release.yaml so configmap generator works
#extraVolumes:
#  - name: supergraph-volume
#    configMap:
#      name: apollosupergraph-config
extraVolumeMounts:
  - name: config-volume
    mountPath: /etc/apollo

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  annotations: {}

ingress:
  enabled: true
  className: ""
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/health-probe-path: "/"
    appgw.ingress.kubernetes.io/health-probe-status-codes: "200-399, 400, 401"
    appgw.ingress.kubernetes.io/appgw-ssl-certificate: "origin"
    appgw.ingress.kubernetes.io/backend-protocol: "http"
#    appgw.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: api-dev.knighthacks.org
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
#    - secretName: router-ssl
#      hosts:
#        - api.dev.knighthacks.org

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}