
schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type Event
  @join__owner(graph: EVENTS)
  @join__type(graph: EVENTS, key: "id")
  @join__type(graph: HACKATHON, key: "id")
{
  description: String! @join__field(graph: EVENTS)
  end_date: Time! @join__field(graph: EVENTS)
  hackathon: Hackathon! @join__field(graph: HACKATHON)
  id: ID! @join__field(graph: EVENTS)
  location: String! @join__field(graph: EVENTS)
  name: String! @join__field(graph: EVENTS)
  start_date: Time! @join__field(graph: EVENTS)
}

type Hackathon
  @join__owner(graph: HACKATHON)
  @join__type(graph: HACKATHON, key: "id")
  @join__type(graph: HACKATHON, key: "term{year semester}")
{
  attendees: [User!]! @join__field(graph: HACKATHON)
  events: [Event!]! @join__field(graph: HACKATHON)
  id: ID! @join__field(graph: HACKATHON)
  sponsors: [Sponsor!]! @join__field(graph: HACKATHON)
  status: HackathonStatus! @join__field(graph: HACKATHON)
  term: Term! @join__field(graph: HACKATHON)
}

input HackathonCreateInput {
  events: [ID!]
  semester: Semester!
  sponsors: [ID!]
  year: Int!
}

input HackathonFilter {
  semester: Semester
  year: Int!
}

enum HackathonStatus {
  FUTURE
  PAST
  PRESENT
}

input HackathonUpdateInput {
  addedEvents: [ID!]
  addedSponsors: [ID!]
  deletedEvents: [ID!]
  deletedSponsors: [ID!]
  semester: Semester
  year: Int
}

type LoginPayload {
  """
  If false then you must register immediately following this. Else, you are logged in and have access to your own user.
  """
  accountExists: Boolean!
  encryptedOAuthAccessToken: String
  jwt: String
  user: User
}

type Mutation {
  createEvent(input: NewEvent!): Event! @join__field(graph: EVENTS)
  createHackathon(input: HackathonCreateInput!): Hackathon! @join__field(graph: HACKATHON)
  createSponsor(input: NewSponsor!): Sponsor! @join__field(graph: SPONSORS)
  deleteEvent(id: ID!): Event! @join__field(graph: EVENTS)
  deleteUser(id: ID!): Boolean! @join__field(graph: USERS)

  """To receive an encryptedOAuthAccessToken first call the Login query"""
  register(encryptedOAuthAccessToken: String!, input: NewUser!, provider: Provider!): User! @join__field(graph: USERS)
  updateEvent(id: ID!, input: UpdatedEvent!): Event! @join__field(graph: EVENTS)
  updateHackathon(input: HackathonUpdateInput!): Hackathon! @join__field(graph: HACKATHON)
  updateSponsor(id: ID!, input: UpdatedSponsor!): Sponsor! @join__field(graph: SPONSORS)
  updateUser(id: ID!, input: NewUser!): User! @join__field(graph: USERS)
}

input NewEvent {
  description: String!
  end_date: Time!
  location: String!
  name: String!
  start_date: Time!
}

input NewSponsor {
  description: String
  logo: String
  name: String!
  since: Time
  tier: SubscriptionTier!
  website: String
}

input NewUser {
  age: Int
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  pronouns: PronounsInput
}

type OAuth {
  provider: Provider!
  uid: String!
}

"""
Example:
subjective=he
objective=him
"""
type Pronouns {
  objective: String!
  subjective: String!
}

input PronounsInput {
  objective: String!
  subjective: String!
}

enum Provider {
  GITHUB
  GMAIL
}

type Query {
  currentHackathon: Hackathon @join__field(graph: HACKATHON)
  events: [Event!]! @join__field(graph: EVENTS)

  """
  The code supplied must be the code given to the frontend by the oauth flow
  Step 1 response https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps
  """
  getAuthRedirectLink(provider: Provider!): String! @join__field(graph: USERS)
  getHackathon(id: ID!): Hackathon! @join__field(graph: HACKATHON)
  getUser(id: ID!): User @join__field(graph: USERS)
  hackathons(filter: HackathonFilter!): [Hackathon!]! @join__field(graph: HACKATHON)
  login(code: String!, provider: Provider!): LoginPayload! @join__field(graph: USERS)
  me: User @join__field(graph: USERS)
  searchUser(name: String!): [User!]! @join__field(graph: USERS)
  sponsors(filter: SponsorFilter): [Sponsor!]! @join__field(graph: SPONSORS)
  users: [User!]! @join__field(graph: USERS)
}

enum Semester {
  FALL
  SPRING
  SUMMER
}

type Sponsor
  @join__owner(graph: SPONSORS)
  @join__type(graph: SPONSORS, key: "id")
  @join__type(graph: HACKATHON, key: "id")
{
  description: String @join__field(graph: SPONSORS)
  hackathons: [Hackathon!]! @join__field(graph: HACKATHON)
  id: ID! @join__field(graph: SPONSORS)
  logo: String @join__field(graph: SPONSORS)
  name: String! @join__field(graph: SPONSORS)
  since: Time! @join__field(graph: SPONSORS)
  tier: SubscriptionTier! @join__field(graph: SPONSORS)
  website: String @join__field(graph: SPONSORS)
}

input SponsorFilter {
  tiers: [SubscriptionTier!]
}

enum SubscriptionTier {
  BRONZE
  GOLD
  PLATINUM
  SILVER
}

type Term {
  semester: Semester!
  year: Int!
}

scalar Time

input UpdatedEvent {
  description: String
  end_date: Time
  location: String
  name: String
  start_date: Time
}

input UpdatedSponsor {
  description: String
  logo: String
  name: String
  since: Time
  tier: SubscriptionTier
  website: String
}

type User
  @join__owner(graph: USERS)
  @join__type(graph: USERS, key: "id")
  @join__type(graph: USERS, key: "oAuth{uid}")
  @join__type(graph: HACKATHON, key: "id")
{
  age: Int @join__field(graph: USERS)
  email: String! @join__field(graph: USERS)
  firstName: String! @join__field(graph: USERS)
  fullName: String! @join__field(graph: USERS)
  hackathons: [Hackathon!]! @join__field(graph: HACKATHON)
  id: ID! @join__field(graph: USERS)
  lastName: String! @join__field(graph: USERS)
  oAuth: OAuth! @join__field(graph: USERS)
  phoneNumber: String! @join__field(graph: USERS)
  pronouns: Pronouns @join__field(graph: USERS)
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  EVENTS @join__graph(name: "events" url: "http://knighthacks-events-api.knighthacks-microservices.svc.cluster.local/query")
  HACKATHON @join__graph(name: "hackathon" url: "http://knighthacks-hackathon-api.knighthacks-microservices.svc.cluster.local/query")
  SPONSORS @join__graph(name: "sponsors" url: "http://knighthacks-sponsors-api.knighthacks-microservices.svc.cluster.local/query")
  USERS @join__graph(name: "users" url: "http://knighthacks-users-api.knighthacks-microservices.svc.cluster.local/query")
}
